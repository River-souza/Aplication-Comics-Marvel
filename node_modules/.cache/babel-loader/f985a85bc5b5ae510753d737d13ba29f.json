{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\maico\\\\Marvel-API-development\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\maico\\\\Marvel-API-development\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\maico\\\\Marvel-API-development\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\maico\\\\Marvel-API-development\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\maico\\\\Marvel-API-development\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\maico\\\\Marvel-API-development\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\maico\\\\Marvel-API-development\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\maico\\\\Marvel-API-development\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\maico\\\\Marvel-API-development\\\\src\\\\pages\\\\home\\\\index.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { clearHeroes, findHeroes, findComics } from './actions';\nimport FooterHome from './components/footer';\nimport SearchChar from './components/search';\nimport ComicThumbnail, { itemSelected } from '../../components/comicThumbnail';\nimport Button from '../../components/button';\n\nvar Home =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Home, _Component);\n\n  function Home(props) {\n    var _this;\n\n    _classCallCheck(this, Home);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Home).call(this, props));\n\n    _this.autoCompleteOnChange = function (value) {\n      _this.setState({\n        search: value\n      });\n\n      if (value.length > 1) {\n        if (_this.state.autoCompletTimeout) {\n          clearTimeout(_this.state.autoCompletTimeout);\n        }\n\n        var timeout = setTimeout(function () {\n          _this.setState({\n            autoCompletTimeout: null\n          });\n\n          _this.props.findHeroes(value);\n        }, 300);\n\n        _this.setState({\n          autoCompletTimeout: timeout\n        });\n      }\n    };\n\n    _this.onSelectItem = function (value, itemSelect) {\n      _this.setState({\n        search: value\n      });\n\n      _this.props.findComics(String(itemSelect));\n    };\n\n    _this.showComicsName = function (datas) {\n      //imprime todos nomes dos quadrinhos\n      function logArrayComicsName(_x, _x2, _x3) {\n        return _logArrayComicsName.apply(this, arguments);\n      }\n\n      function _logArrayComicsName() {\n        _logArrayComicsName = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(element, index, array) {\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  console.log(array[index]);\n\n                case 1:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n        return _logArrayComicsName.apply(this, arguments);\n      }\n\n      datas.forEach(logArrayComicsName);\n    };\n\n    _this.state = {\n      search: '',\n      autoCompletTimeout: null,\n      itensSelected: [],\n      count: 0\n    };\n    _this.onButtonClick = _this.onButtonClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Home, [{\n    key: \"onButtonClick\",\n    value: function onButtonClick() {\n      //Método utilizado caso haja a necessidade da função de buscar um comics de acordo com seu id\n      this.props.findComics('1011334'); //procura comics pelo id\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"main\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(SearchChar, {\n        char: this.props.chars,\n        search: this.state.search,\n        autoCompleteOnChange: this.autoCompleteOnChange,\n        onSelectItem: this.onSelectItem,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, this.props.comics ? React.createElement(\"section\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(\"section\", {\n        className: \"wrapper-comics\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, this.props.comics.forEach(\n      /*#__PURE__*/\n      function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee2(element, index, array) {\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  React.createElement(React.Fragment, {\n                    key: array[index].id,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 71\n                    },\n                    __self: this\n                  }, React.createElement(ComicThumbnail, {\n                    id: array[index].id.toString(),\n                    url: array[index].urls[0].url,\n                    title: array[index].title,\n                    thumbnail: array[index].thumbnail.path + '.' + array[index].thumbnail.extension,\n                    description: array[index].description,\n                    writer: array[index].creators.items[0].name.toString(),\n                    penciller: array[index].creators.items[0].name.toString(),\n                    published: array[index].dates[0].date,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 72\n                    },\n                    __self: this\n                  }));\n\n                case 1:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, this);\n        }));\n\n        return function (_x4, _x5, _x6) {\n          return _ref.apply(this, arguments);\n        };\n      }())\n      /* this.props.comics.map(item => \n          <React.Fragment key={item.id}>\n           <ComicThumbnail\n             id={item.id.toString()}\n             url={item.urls[0].url}\n             title={item.title}\n             thumbnail={item.thumbnail.path + '.' + item.thumbnail.extension}\n             description={item.description}\n             writer={item.creators.items[0].name.toString()}\n             penciller={item.creators.items[0].name.toString()}\n             published={item.dates[0].date}\n           >\n           </ComicThumbnail>\n         </React.Fragment>\n        \n       )*/\n      ), React.createElement(Button, {\n        onClick: null,\n        text: \"Voltar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }), React.createElement(Button, {\n        onClick: function onClick(e) {\n          console.log(itemSelected);\n          ;\n          /*\n          codigo para verificar os itens selecionados\n          para abrir o modal com o mapa\n          */\n        },\n        text: \"Enviar-me\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      })) : React.createElement(\"section\", {\n        className: \"wrapper-call\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, \"VEJA OS GIBIS DA MARVEL AQUI!\"), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"Digite o nome do super-her\\xF3i ou t\\xEDtulo no campo de pesquisa acima. \")))));\n    }\n  }]);\n\n  return Home;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    characters: state.home.characters,\n    comics: state.home.comics,\n    chars: state.home.chars\n  };\n};\n\nexport default connect(mapStateToProps, {\n  clearHeroes: clearHeroes,\n  findHeroes: findHeroes,\n  findComics: findComics\n})(Home);","map":{"version":3,"sources":["C:\\Users\\maico\\Marvel-API-development\\src\\pages\\home\\index.js"],"names":["React","Component","connect","clearHeroes","findHeroes","findComics","FooterHome","SearchChar","ComicThumbnail","itemSelected","Button","Home","props","autoCompleteOnChange","value","setState","search","length","state","autoCompletTimeout","clearTimeout","timeout","setTimeout","onSelectItem","itemSelect","String","showComicsName","datas","logArrayComicsName","element","index","array","console","log","forEach","itensSelected","count","onButtonClick","bind","chars","comics","id","toString","urls","url","title","thumbnail","path","extension","description","creators","items","name","dates","date","e","mapStateToProps","characters","home"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { clearHeroes, findHeroes, findComics } from './actions';\nimport FooterHome from './components/footer';\nimport SearchChar from './components/search';\nimport ComicThumbnail, {itemSelected} from '../../components/comicThumbnail';\nimport Button from '../../components/button';\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      search: '',\n      autoCompletTimeout: null,\n      itensSelected: [],\n      count: 0,\n    };\n    this.onButtonClick = this.onButtonClick.bind(this);\n\n  }\n\n  autoCompleteOnChange = (value) => {\n    this.setState({ search: value });\n    if (value.length > 1) {\n      if (this.state.autoCompletTimeout) {\n        clearTimeout(this.state.autoCompletTimeout);\n      }\n      const timeout = setTimeout(() => {\n        this.setState({ autoCompletTimeout: null });\n        this.props.findHeroes(value);\n      }, 300);\n      this.setState({ autoCompletTimeout: timeout });\n    }\n  }\n\n  onButtonClick() {//Método utilizado caso haja a necessidade da função de buscar um comics de acordo com seu id\n    this.props.findComics('1011334');//procura comics pelo id\n  }\n\n  onSelectItem = (value, itemSelect) => {\n    this.setState({ search: value });\n    this.props.findComics(String(itemSelect));\n  }\n  \n   showComicsName = (datas) => {\n        //imprime todos nomes dos quadrinhos\n         async function logArrayComicsName(element, index, array) {\n            console.log(array[index]);\n        }\n        datas.forEach(logArrayComicsName);\n    }\n\n  render() {\n    return (\n      <main>\n        <div className=\"container\">\n          <SearchChar\n            char={this.props.chars}\n            search={this.state.search}\n            autoCompleteOnChange={this.autoCompleteOnChange}\n            onSelectItem={this.onSelectItem}\n          />\n          <div className=\"content\">\n            {this.props.comics ?\n        <section>\n              <section className=\"wrapper-comics\">\n                {\n        \n        this.props.comics.forEach(\n         async function (element, index, array) {\n        <React.Fragment key={array[index].id}>\n                      <ComicThumbnail\n                        id={array[index].id.toString()}\n                        url={array[index].urls[0].url}\n                        title={array[index].title}\n                        thumbnail={array[index].thumbnail.path + '.' + array[index].thumbnail.extension}\n                        description={array[index].description}\n                        writer={array[index].creators.items[0].name.toString()}\n                        penciller={array[index].creators.items[0].name.toString()}\n                        published={array[index].dates[0].date}\n                      >\n                      </ComicThumbnail>\n                    </React.Fragment>\n    }\n          )\n                 /* this.props.comics.map(item => \n                     <React.Fragment key={item.id}>\n                      <ComicThumbnail\n                        id={item.id.toString()}\n                        url={item.urls[0].url}\n                        title={item.title}\n                        thumbnail={item.thumbnail.path + '.' + item.thumbnail.extension}\n                        description={item.description}\n                        writer={item.creators.items[0].name.toString()}\n                        penciller={item.creators.items[0].name.toString()}\n                        published={item.dates[0].date}\n                      >\n                      </ComicThumbnail>\n                    </React.Fragment>\n                   \n                  )*/\n                }\n              </section>\n<Button onClick={null} text={\"Voltar\"}></Button>\n<Button onClick={(e) => {\n                 console.log(itemSelected);;\n                 /*\n                 codigo para verificar os itens selecionados\n                 para abrir o modal com o mapa\n                 */\n                }} text={\"Enviar-me\"}></Button>\n</section>\n              :\n              <section className=\"wrapper-call\">\n                <h1>VEJA OS GIBIS DA MARVEL AQUI!</h1>\n                <h2>Digite o nome do super-herói ou título no campo de pesquisa acima. </h2>\n              </section>\n            }\n          </div>\n        </div>\n      </main >\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  characters: state.home.characters,\n  comics: state.home.comics,\n  chars: state.home.chars\n});\n\nexport default connect(mapStateToProps, {\n  clearHeroes,\n  findHeroes,\n  findComics\n})(Home);\n"]},"metadata":{},"sourceType":"module"}